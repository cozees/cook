// empty array, add later during initialize pharse
SQLITES = []

// sqlite version and release year need to build download link
VERSIONS = [
    [2021, "3.36.0"],
    [2020, "3.32.0"],
    [2015, "3.9.2"],
    [2012, "3.1.2.1"],
]

FLAG = [
    "data1",
    "data2",
    "data3",
]

initialize:
    for i, vs in VERSIONS {
        // split string into array by dot(.)
        VERSION = @ssplit -by . $vs[1]
        M = VERSION[0]
        
        // append 1 character 0 to the left of string if string 
        // is less than maximum length 2
        N = @spad -m 2 -l 1 -by 0 $VERSION[1]
        P = @spad -m 2 -l 1 -by 0 $VERSION[2]
        B = "00"
        
        // if array is size more than 3
        if sizeof VERSION > 3 {
            B = @spad -m 2 -l 1 -by 0 $VERSION[3]
        }

        // append string url into array
        SQLITES += "https://www.sqlite.org/${vs[0]}/sqlite-amalgamation-${M}${N}${P}${B}.zip"
    }

finalize:
    @print -e "finalize executed" >> $FILE2

all: *

case1:
    // -e tell print to return printed result as a result
    @print -e "" >> $FILE1
    for i, vs in VERSIONS {
        @print -e $i ${vs[0]} ${vs[1]} >> $FILE1
    }
    // array variable will be expand when using as argument for
    // function, target or external command line
    @print -e $FLAG >> $FILE1
    for i, dl in SQLITES {
        @print -e $i $dl >> $FILE1
    }

case2:
    @print -e "" >> $FILE2
    #echo 123 abc >> $FILE2